# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Build CLI Binaries

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to build (e.g., v1.0.0, v1.0.0-rc.1)'
        required: true
        type: string
      create_rc:
        description: 'Create release candidate with unsigned binaries'
        required: false
        type: boolean
        default: false
      promote_rc:
        description: 'Promote RC to final release (requires signed binaries)'
        required: false
        type: boolean
        default: false

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: ubuntu-24.04-arm
            target: linux-arm64
          - os: macos-13  # x64/Intel
            target: darwin-x64
          - os: macos-latest  # ARM64/M1
            target: darwin-arm64
          - os: windows-latest
            target: win32-x64
          # Note: Windows ARM64 currently runs x64 binaries through emulation
          # Native ARM64 support is not yet available in Bun
          # See: https://github.com/oven-sh/bun/pull/11430
          # - os: windows-11-arm
          #   target: win32-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate version format
        run: |
          VERSION="${{ inputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Version '$VERSION' does not follow semantic versioning format (e.g., v1.0.0, v1.0.0-rc.1)"
            exit 1
          fi
          echo "✓ Version format is valid: $VERSION"
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.11.0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install root dependencies
        run: pnpm i
      
      - name: Install genkit-tools dependencies
        run: pnpm pnpm-install-genkit-tools
      
      - name: Build genkit-tools
        run: pnpm build:genkit-tools
      
      - name: Set binary extension
        id: binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == win32-* ]]; then
            echo "ext=.exe" >> $GITHUB_OUTPUT
          else
            echo "ext=" >> $GITHUB_OUTPUT
          fi
      
      - name: Compile CLI binary
        shell: bash
        run: |
          cd genkit-tools/cli
          pnpm compile:bun
          
          # Handle the binary name based on OS
          if [[ "${{ matrix.os }}" == windows-* ]]; then
            # On Windows, Bun outputs genkit.exe
            mv dist/bin/genkit.exe "dist/bin/genkit-${{ matrix.target }}.exe"
          else
            # On Unix-like systems, no extension
            mv dist/bin/genkit "dist/bin/genkit-${{ matrix.target }}"
          fi
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: genkit-${{ matrix.target }}
          path: genkit-tools/cli/dist/bin/genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }}
          retention-days: 7

  test:
    needs: build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: ubuntu-24.04-arm
            target: linux-arm64
          - os: macos-13
            target: darwin-x64
          - os: macos-latest
            target: darwin-arm64
          - os: windows-latest
            target: win32-x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Set binary extension
        id: binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == win32-* ]]; then
            echo "ext=.exe" >> $GITHUB_OUTPUT
          else
            echo "ext=" >> $GITHUB_OUTPUT
          fi
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: genkit-${{ matrix.target }}
          path: ./
      
      - name: Make binary executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x genkit-${{ matrix.target }}
      
      - name: Test --help command
        shell: bash
        run: |
          echo "Testing genkit --help"
          ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }} --help
      
      - name: Test --version command
        shell: bash
        run: |
          echo "Testing genkit --version"
          ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }} --version
      
      - name: Verify UI commands exist
        shell: bash
        run: |
          echo "Verifying UI commands are available"
          ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }} ui:start --help
          ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }} ui:stop --help
      
      - name: Test UI start functionality (Unix only)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Testing genkit ui:start"
          
          # Start UI in background, piping any prompts to accept them
          (echo "" | ./genkit-${{ matrix.target }} ui:start 2>&1 | tee ui_output.log) &
          UI_PID=$!
          
          # Give it time to start
          sleep 5
          
          # Check if it started successfully by looking for the expected output
          if grep -q "Genkit Developer UI started at:" ui_output.log 2>/dev/null; then
            echo "✓ UI started successfully"
            cat ui_output.log
            
            # Try to stop it gracefully
            echo "Testing genkit ui:stop"
            ./genkit-${{ matrix.target }} ui:stop || true
            
            # Give it time to stop
            sleep 2
          else
            echo "UI output:"
            cat ui_output.log 2>/dev/null || echo "No output captured"
            
            # Check if process is still running
            if ps -p $UI_PID > /dev/null 2>&1; then
              echo "Process is running but didn't produce expected output"
              kill $UI_PID 2>/dev/null || true
            else
              echo "Process exited (might be due to cookie prompt or missing project)"
            fi
          fi
          
          # Clean up any remaining processes
          pkill -f "genkit.*ui:start" 2>/dev/null || true
      
      - name: Test UI start functionality (Windows only)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Testing genkit ui:start"
          
          # Create empty input file first for redirecting stdin
          "" | Out-File -FilePath ".\empty.txt"
          
          # Start UI in background, redirecting input to handle prompts
          $process = Start-Process -FilePath ".\genkit-${{ matrix.target }}.exe" `
            -ArgumentList "ui:start" `
            -RedirectStandardInput ".\empty.txt" `
            -RedirectStandardOutput ".\ui_output.log" `
            -RedirectStandardError ".\ui_error.log" `
            -PassThru `
            -NoNewWindow
          
          # Give it time to start
          Start-Sleep -Seconds 5
          
          # Read the output
          $output = Get-Content ".\ui_output.log" -ErrorAction SilentlyContinue
          $errorOutput = Get-Content ".\ui_error.log" -ErrorAction SilentlyContinue
          
          if ($output -match "Genkit Developer UI started at:") {
            Write-Host "✓ UI started successfully"
            Write-Host "Output:"
            $output | Write-Host
            
            # Try to stop it gracefully
            Write-Host "Testing genkit ui:stop"
            & ".\genkit-${{ matrix.target }}.exe" ui:stop
            
            Start-Sleep -Seconds 2
          } else {
            Write-Host "UI did not start as expected"
            Write-Host "Output:"
            $output | Write-Host
            Write-Host "Error:"
            $errorOutput | Write-Host
            
            # Check if process is still running
            if (-not $process.HasExited) {
              Write-Host "Process is still running, terminating..."
              Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
            } else {
              Write-Host "Process exited (might be due to cookie prompt or missing project)"
            }
          }
          
          # Clean up any remaining genkit processes
          Get-Process | Where-Object { $_.ProcessName -match "genkit" } | Stop-Process -Force -ErrorAction SilentlyContinue

  create-rc:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: inputs.create_rc == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous release tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Generate changelog from previous tag to current
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # First release
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "- Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release Candidate
        id: create_rc
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: Genkit CLI ${{ inputs.version }} (Release Candidate)
          body: |
            # Genkit CLI ${{ inputs.version }} - Release Candidate
            
            ⚠️ **This is a release candidate with unsigned binaries for testing purposes.**
            
            ## Downloads (Unsigned - For Testing Only)
            
            - [Linux x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-linux-x64)
            - [Linux ARM64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-linux-arm64)
            - [macOS x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-darwin-x64)
            - [macOS ARM64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-darwin-arm64)
            - [Windows x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-win32-x64.exe)
            
            ## Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Next Steps
            
            After testing, these binaries will be signed and promoted to the final release.
            
            ## Installation (Testing Only)
            
            ```bash
            # Download and test the RC binary
            curl -Lo genkit https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m | sed 's/x86_64/x64/;s/aarch64/arm64/')
            chmod +x genkit
            ./genkit --version
            ```
          draft: false
          prerelease: true

  upload-rc-assets:
    needs: [build, test, create-rc]
    runs-on: ubuntu-latest
    if: inputs.create_rc == 'true'
    strategy:
      matrix:
        include:
          - target: linux-x64
          - target: linux-arm64
          - target: darwin-x64
          - target: darwin-arm64
          - target: win32-x64
    
    steps:
      - name: Set binary extension
        id: binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == win32-* ]]; then
            echo "ext=.exe" >> $GITHUB_OUTPUT
          else
            echo "ext=" >> $GITHUB_OUTPUT
          fi
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: genkit-${{ matrix.target }}
          path: ./
      
      - name: Upload to GitHub Release Candidate
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-rc.outputs.upload_url }}
          asset_path: ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }}
          asset_name: genkit-${{ matrix.target }}
          asset_content_type: application/octet-stream

  promote-to-release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: inputs.promote_rc == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Note: After RC creation, signed binaries should be uploaded via Kokoro
      # before running promote_rc. The promotion assumes signed binaries are
      # available for the final release.
      - name: Validate signed binaries exist
        run: |
          RC_VERSION="${{ inputs.version }}"
          FINAL_VERSION="${RC_VERSION%-rc*}"
          
          echo "Validating signed binaries exist for RC: $RC_VERSION"
          echo "Will promote to final version: $FINAL_VERSION"
          
          # Expected platforms that should have signed binaries
          EXPECTED_PLATFORMS=("linux-x64" "linux-arm64" "darwin-x64" "darwin-arm64" "win32-x64")
          
          # Check if RC release exists and get its assets
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/firebase/genkit/releases/tags/$RC_VERSION")
          
          if [[ $(echo "$RELEASE_INFO" | jq -r '.id') == "null" ]]; then
            echo "❌ Error: RC release $RC_VERSION not found"
            exit 1
          fi
          
          echo "✓ RC release $RC_VERSION found"
          
          # Get list of assets from the RC release
          ASSETS=$(echo "$RELEASE_INFO" | jq -r '.assets[].name' | sort)
          
          # Check for expected signed binaries
          MISSING_BINARIES=()
          for platform in "${EXPECTED_PLATFORMS[@]}"; do
            if [[ "$platform" == win32-* ]]; then
              expected_file="genkit-$platform.exe"
            else
              expected_file="genkit-$platform"
            fi
            
            if ! echo "$ASSETS" | grep -q "^$expected_file$"; then
              MISSING_BINARIES+=("$expected_file")
            else
              echo "✓ Found signed binary: $expected_file"
            fi
          done
          
          if [[ ${#MISSING_BINARIES[@]} -gt 0 ]]; then
            echo "❌ Missing signed binaries:"
            printf '  - %s\n' "${MISSING_BINARIES[@]}"
            echo ""
            echo "Please ensure all binaries are signed before promoting to final release."
            echo "You can trigger the signing workflow or manually upload signed binaries."
            exit 1
          fi
          
          echo "✅ All expected signed binaries found in RC release"
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous release tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Generate changelog from previous tag to current
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # First release
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "- Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Final Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: Genkit CLI ${{ inputs.version }}
          body: |
            # Genkit CLI ${{ inputs.version }}
            
            ## Downloads
            
            - [Linux x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-linux-x64)
            - [Linux ARM64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-linux-arm64)
            - [macOS x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-darwin-x64)
            - [macOS ARM64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-darwin-arm64)
            - [Windows x64](https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-win32-x64.exe)
            
            ## Changes
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Quick Install (Recommended)
            
            ```bash
            curl -sL https://genkit.tools | bash
            ```
            
            ### Manual Installation
            
            ```bash
            # Download the appropriate binary for your platform
            curl -Lo genkit https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m | sed 's/x86_64/x64/;s/aarch64/arm64/')
            
            # Make it executable
            chmod +x genkit
            
            # Move to a directory in your PATH
            sudo mv genkit /usr/local/bin/
            
            # Verify installation
            genkit --version
            ```
            
            ### Windows Installation
            
            ```powershell
            # Download the Windows binary
            Invoke-WebRequest -Uri "https://github.com/firebase/genkit/releases/download/${{ inputs.version }}/genkit-win32-x64.exe" -OutFile "genkit.exe"
            
            # Add to PATH or run from current directory
            .\genkit.exe --version
            ```
            
            ## Documentation
            
            For more information, visit [https://firebase.google.com/docs/genkit/](https://firebase.google.com/docs/genkit/)
          draft: false
          prerelease: false

  upload-release-assets:
    needs: [build, test, promote-to-release]
    runs-on: ubuntu-latest
    if: inputs.promote_rc == 'true'
    strategy:
      matrix:
        include:
          - target: linux-x64
          - target: linux-arm64
          - target: darwin-x64
          - target: darwin-arm64
          - target: win32-x64
    
    steps:
      - name: Set binary extension
        id: binary
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == win32-* ]]; then
            echo "ext=.exe" >> $GITHUB_OUTPUT
          else
            echo "ext=" >> $GITHUB_OUTPUT
          fi
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: genkit-${{ matrix.target }}
          path: ./
      
      - name: Upload to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.promote-to-release.outputs.upload_url }}
          asset_path: ./genkit-${{ matrix.target }}${{ steps.binary.outputs.ext }}
          asset_name: genkit-${{ matrix.target }}
          asset_content_type: application/octet-stream

  update-latest-tag:
    needs: [promote-to-release, upload-release-assets]
    runs-on: ubuntu-latest
    if: inputs.promote_rc == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update latest tag
        run: |
          # Check if latest tag already points to the correct version
          CURRENT_LATEST=$(git rev-parse latest 2>/dev/null || echo "")
          TARGET_COMMIT=$(git rev-parse ${{ inputs.version }} 2>/dev/null || echo "")
          
          if [[ "$CURRENT_LATEST" == "$TARGET_COMMIT" ]]; then
            echo "Latest tag already points to ${{ inputs.version }}"
            exit 0
          fi
          
          # Delete the existing "latest" tag if it exists
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true
          
          # Create new "latest" tag pointing to the release tag
          git tag latest ${{ inputs.version }}
          git push origin latest
          
          echo "Updated 'latest' tag to point to ${{ inputs.version }}"